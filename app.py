from flask import Flask, request
import os
from dotenv import load_dotenv
from messenger import send_message
from market_data import (
    get_kline,
    get_rsi,
    get_price,
    get_volume,
    get_all_symbols
)
from subscribers import add_subscriber
from utils import format_signal
from signal_engine import scan_entry

# üîß T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN")

# üöÄ Kh·ªüi t·∫°o Flask app
app = Flask(__name__)

# ‚úÖ X√°c th·ª±c Facebook webhook (GET)
@app.route("/webhook", methods=["GET"])
def verify():
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    return challenge if token == VERIFY_TOKEN else "Invalid token", 403

# ‚úÖ Nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng (POST)
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    for entry in data.get("entry", []):
        for msg in entry.get("messaging", []):
            sender_id = msg["sender"]["id"]
            add_subscriber(sender_id)

            if "message" in msg and "text" in msg["message"]:
                user_text = msg["message"]["text"]
                symbol = extract_symbol(user_text)
                if symbol:
                    response = analyze_symbol(symbol)
                else:
                    response = f"ü§ñ Kh√¥ng t√¨m th·∫•y t√™n coin trong: \"{user_text}\"\nG√µ PEPE, OP, DOGE, LDO, v.v. ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch k·ªπ thu·∫≠t."
                send_message(sender_id, response)

    return "ok", 200

# üß† T·ª± ƒë·ªông nh·∫≠n di·ªán m√£ giao d·ªãch t·ª´ n·ªôi dung tin nh·∫Øn
def extract_symbol(text):
    text = text.upper().replace("USDT", "")
    user_words = text.split()
    all_symbols = get_all_symbols()

    for word in user_words:
        matches = [s for s in all_symbols if s.startswith(word)]
        if matches:
            return matches[0]  # VD: "PEPE" ‚Üí "PEPEUSDT"
    return None

# üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t token
def analyze_symbol(symbol):
    try:
        candles = get_kline(symbol)
        if not candles or len(candles) < 20:
            return f"üö´ Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch {symbol}"

        rsi = get_rsi(candles)
        price = get_price(symbol)
        volume = get_volume(symbol)
        ma20 = sum([float(k[4]) for k in candles[-20:]]) / 20

        # üî• C·∫£nh b√°o volume
        avg_vol = sum([float(k[5]) for k in candles[-5:]]) / 5
        volume_warn = volume > avg_vol * 5

        type_ = "LONG" if rsi < 30 and price > ma20 else "SHORT" if rsi > 70 and price < ma20 else "NEUTRAL"

        if type_ == "NEUTRAL":
            return f"ü§î {symbol}: Ch∆∞a r√µ xu h∆∞·ªõng. RSI: {rsi:.2f} | Gi√°: ${price:.6f}"

        tp = price * (1.05 if type_ == "LONG" else 0.95)
        sl = price * (0.95 if type_ == "LONG" else 1.05)

        signal = {
            "type": type_,
            "symbol": symbol,
            "price": price,
            "rsi": rsi,
            "ma20": ma20,
            "volume": volume,
            "tp": tp,
            "sl": sl,
            "entry_type": "market",
            "volume_warn": volume_warn
        }

        return format_signal(signal)

    except Exception as e:
        return f"üö´ L·ªói khi ph√¢n t√≠ch {symbol}: {e}"
