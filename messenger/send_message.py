import requests
import logging
import json
from utils.config_loader import PAGE_ACCESS_TOKEN

DEFAULT_TIMEOUT = 5  # seconds
MAX_RETRIES = 2

def _post(payload):
    """
    Internal helper: g·ª≠i HTTP request v·ªõi retry + timeout, c√≥ log chi ti·∫øt l·ªói.
    """
    url    = "https://graph.facebook.com/v15.0/me/messages"
    params = {"access_token": PAGE_ACCESS_TOKEN}

    logging.info("üì¶ ƒêang g·ª≠i payload: %s", json.dumps(payload, indent=2))

    for attempt in range(1, MAX_RETRIES + 1):
        try:
            resp = requests.post(
                url,
                params=params,
                json=payload,
                timeout=DEFAULT_TIMEOUT
            )

            if not resp.ok:
                logging.warning("‚ö†Ô∏è Facebook tr·∫£ l·ªói: %s", resp.text)

            resp.raise_for_status()
            data = resp.json()
            logging.info("‚úÖ G·ª≠i th√†nh c√¥ng: %s", data)
            return data
        except requests.exceptions.HTTPError as http_err:
            logging.error("‚ùå L·ªói HTTP: %s", http_err.response.text)
        except Exception as e:
            logging.warning("‚ö†Ô∏è Attempt %d/%d failed: %s", attempt, MAX_RETRIES, e)
            if attempt == MAX_RETRIES:
                logging.exception("‚ùå T·∫•t c·∫£ retry ƒë·ªÅu th·∫•t b·∫°i")
                return None

def send_message(recipient_id, message_text, messaging_type="RESPONSE", persona_id=None):
    """
    G·ª≠i tin nh·∫Øn vƒÉn b·∫£n thu·∫ßn t√∫y.
    """
    if not recipient_id:
        logging.error("‚ùå recipient_id tr·ªëng ‚Äî kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn")
        return None

    payload = {
        "messaging_type": messaging_type,
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }

    if persona_id:
        payload["persona_id"] = persona_id

    return _post(payload)

def send_template_message(
    recipient_id,
    text=None,
    template_payload=None,
    quick_replies=None,
    messaging_type="RESPONSE",
    persona_id=None
):
    """
    G·ª≠i template n√¢ng cao (generic, button...) k√®m optional text & quick replies.
    """
    if not recipient_id:
        logging.error("‚ùå recipient_id tr·ªëng ‚Äî kh√¥ng th·ªÉ g·ª≠i template")
        return None

    if not text and not template_payload:
        logging.error("‚ùå Template ph·∫£i c√≥ √≠t nh·∫•t 'text' ho·∫∑c 'template_payload'")
        return None

    message = {}
    if text:
        message["text"] = text

    message["attachment"] = {
        "type": "template",
        "payload": template_payload or {}
    }

    if quick_replies:
        message["quick_replies"] = quick_replies

    payload = {
        "messaging_type": messaging_type,
        "recipient": {"id": recipient_id},
        "message": message
    }

    if persona_id:
        payload["persona_id"] = persona_id

    return _post(payload)

def send_button_template(recipient_id, text, buttons, quick_replies=None, **kwargs):
    """
    Shortcut: g·ª≠i button template ƒë∆°n gi·∫£n.
    """
    if not text or not buttons:
        logging.error("‚ùå Button Template c·∫ßn c·∫£ 'text' v√† 'buttons'")
        return None

    payload = {
        "template_type": "button",
        "text": text,
        "buttons": buttons
    }

    return send_template_message(
        recipient_id=recipient_id,
        text=text,
        template_payload=payload,
        quick_replies=quick_replies,
        **kwargs
    )
